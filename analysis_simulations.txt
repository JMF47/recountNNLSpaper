##########################################################################################
module load cufflinks/2.2.1
module load python/2.6.6
module load bowtie/1.1.1
PATH=$PATH:/users/jmfu/kallisto_linux-v0.43.0:/users/jmfu/RSEM-1.3.0
##########################################################################################
### Subset to coding transcripts on chr1 and chr14
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr)
txs_full = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.coding.gff3")
txs_sim = txs_full[seqnames(txs_full) %in% c("chr1", "chr14")]
export(txs_sim, con='/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf', format='gtf')

##########################################################################################
### Preparing simulation truth (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr)
txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
txs = txs[txs$type=="transcript"]
sim_info = data.frame(transcript_id = txs$transcript_id, gene_id = txs$gene_id, reads = 0)
library(gtools)
simAbundance = function(gene, sim_info){
	sim_info_sub = sim_info[sim_info$gene_id == gene,]
	k = dim(sim_info_sub)[1]
	abundance = rdirichlet(1, rep(1/k, k))
	return(abundance)
}
seed=76
set.seed(seed)
genes = unique(sim_info$gene_id)
abundances = sapply(genes, simAbundance, sim_info)
abundances = do.call(c, abundances)
sim_info$abundance = abundances

tx_perGene = by(rep(1, dim(sim_info)[1]), droplevels(sim_info$gene_id), sum)
tx_perGene = data.frame(gene_id = names(tx_perGene), tx_count = as.numeric(tx_perGene))
set.seed(seed+1)
tx_perGene$geneReads = rnbinom(dim(tx_perGene)[1], 4, 0.01)
sim_info = merge(sim_info, tx_perGene, by="gene_id", sort=F)
sim_info$reads = round(sim_info$geneReads*sim_info$abundance)
write.table(sim_info, row.names=F, file="sim_info.txt")

##########################################################################################
### Single End (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr); library(recountNNLS)

simulate = function(rl, paired){
	condition = paste0(rl, "_", paired)
	samples = paste0("sample_0", 1:4)
	fasta = import("/dcl01/leek/data/ta_poc/GencodeV25/sim.fa", format="fasta")
	outdir = paste0("/dcl01/leek/data/ta_poc/simulation/", condition)
	dir.create(outdir)
	setwd(outdir)

	txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
	txs = txs[txs$type=="transcript"]
	sim_info = read.table("/dcl01/leek/data/ta_poc/geuvadis/simulation/sim_info.txt", header=T)
	ind = which(sim_info$reads>0)
	fasta = fasta[ind]
	sim_info = sim_info[ind,]
	writeXStringSet(fasta, "tx.fasta")
	set.seed(rl+paired)
	simulate_experiment('tx.fasta', reads_per_transcript=sim_info$reads, num_reps=c(2, 2), fold_changes=1, outdir="reads", paired=(paired==2), readlen=rl)

	##########################################################################################
	### Rail-RNA
	##########################################################################################
	files = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/reads/", samples, ".fasta")
	man = cbind(files, 0, samples)
	rail_dir = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rail")
	dir.create(rail_dir)
	write.table(man, sep="\t", quote=F, col.names=F, row.names=F, file=paste0(rail_dir, "/manifest.txt"))

	dir.create(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/"))
	dir.create(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/logs"))
	script = "/users/jmfu/sum.sh"
	tool = "/dcl01/leek/data/bwtool/bwtool-1.0/bwtool"
	bins = paste0("/dcl01/leek/data/ta_poc/GencodeV25/bins_", rl, ".bed")
	bw = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rail/rail-rna_out/coverage_bigwigs/", samples, ".bw")
	output = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/", samples)
	sapply(output, dir.create)
	cmds = cbind("sh", script, tool, bins, bw, output)
	write.table(cmds, sep="\t", quote=F, col.names=F, row.names=F, file=paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/commands.txt"))
	index="/dcl01/leek/data/HG38_rail/Homo_sapiens/UCSC/hg38/Sequence/"
	setwd(rail_dir)
	system2("rail-rna", paste0("go local -x ", index, "/BowtieIndex/genome ", index, "/Bowtie2Index/genome -m ", rail_dir, "/manifest.txt"))

	##########################################################################################
	### hisat2
	##########################################################################################
	setwd(outdir)
	dir.create("hisat2")
	dir.create("hisat2/aligned")
	dir.create("hisat2/sorted")
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".ss.bam")
		readPath = paste0(outdir, "/reads/", s, ".fasta")
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".ss")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".ss.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "ss..bam")
		system2("hisat2", paste0("--dta -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -U ", readPath, " -S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".cl.bam")
		readPath = paste0(outdir, "/reads/", s, ".fasta")
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".cl")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".cl.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "cl..bam")
		system2("hisat2", paste0("--dta-cufflinks -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -U ", readPath, " -S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}

	### stringtie
	stringtie_dir = paste0(outdir, "/stringtie")
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"
	system2("mkdir", stringtie_dir)
	system2("cd", stringtie_dir)

	for(s in samples){
		workingDir = paste0(stringtie_dir, "/", s)
		system2("mkdir", workingDir)
		system2("stringtie", paste0("-o ", workingDir, "/cov-e.gtf -G ", annotation, " -e /dcl01/leek/data/ta_poc/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
		system2("stringtie", paste0("-o ", workingDir, "/cov.gtf -G ", annotation, " /dcl01/leek/data/ta_poc/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
	}

	setwd(stringtie_dir)
	info = import("sample_01/cov.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$reference_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov.rda"))

	setwd(stringtie_dir)
	info = import("sample_01/cov-e.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$transcript_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov-e.rda"))

	### cufflinks
	cufflinks_dir = paste0(outdir, "/hisat2/cufflinks")
	system2("mkdir", cufflinks_dir)
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"

	for(s in samples){
		workingDir = paste0(cufflinks_dir, "/", s)
		system2("mkdir", workingDir)
		system2("cufflinks", paste0("-m 250 -s 25 --total-hits-norm --no-effective-length-correction --no-length-correction -o ",
			workingDir, " -G ", annotation, " /dcl01/leek/data/ta_poc/simulation/", condition, "/hisat2/sorted/", s, ".cl.bam"))
	}

	library(rtracklayer)
	setwd(cufflinks_dir)
	samps = list.files(); samps = samps[stringr::str_detect(samps, "sample")]
	base = import(paste0(samps[1], "/transcripts.gtf"))
	base_tx = base[base$type=="transcript"]
	info = data.frame(transcript_id = base_tx$transcript_id)
	for(f in samps){
		tmp = import(paste0(f, "/transcripts.gtf"))
		tmp_tx = tmp[tmp$type=="transcript"]
		info = cbind(info, tmp_tx$cov)
	}
	save(info, file=paste0(cufflinks_dir, "/hisat_cufflinks_cov.rda"))

	##########################################################################################
	### Kallisto
	##########################################################################################
	kallisto_dir = paste0(outdir, "/kallisto")
	system2("mkdir", kallisto_dir)
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_kallisto_ind"

	for(s in samples){
		workingDir = paste0(kallisto_dir, "/", s)
		system2("mkdir", workingDir)
		system2("kallisto", paste0("quant -i ", index, " -o ", workingDir, " --single -l 250 -s 25 ", outdir, "/reads/", s, ".fasta"))
	}

	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/kallisto"))
	files = list.files(); files = files[stringr::str_detect(files, "sample")]
	tab = read.table(paste0(files[1], "/abundance.tsv"), header=T)
	counts_kallisto = matrix(0, ncol=length(files), nrow=dim(tab)[1])
	rownames(counts_kallisto) = tab[,1]
	for(i in 1:length(files)){
		tab = read.table(paste0(files[i], "/abundance.tsv"), header=T)
		counts_kallisto[,i] = tab[match(rownames(counts_kallisto), tab[,1]),4]
	}
	save(counts_kallisto, file=paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/kallisto/kallisto_reads.rda"))

	##########################################################################################
	### Salmon
	##########################################################################################
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_salmon_ind/"
	salmon_dir = paste0(outdir, "/salmon")
	dir.create(salmon_dir)
	for(s in samples){
		system2("/users/jmfu/Salmon-0.8.2_linux_x86_64/bin/salmon", paste0("quant -i ", index, " -l A -r ", outdir, "/reads/", s, ".fasta -o ", salmon_dir, "/", s))	
	}

	library(rtracklayer)
	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/salmon"))
	files = list.files()
	files = files[stringr::str_detect(files, "sample")]

	tab = read.table(paste0(files[1], "/quant.sf"), header=T)
	salmon = data.frame(transcript_id = tab[,1], reads = tab[,5])
	save(salmon, file="salmon_reads.rda")


	##########################################################################################
	### RSEM
	##########################################################################################
	rsem_dir = paste0(outdir, "/rsem")
	dir.create(rsem_dir)
	index = "/dcl01/leek/data/ta_poc/GencodeV25/rsem_sim_ind "

	for(s in samples){
		system2("rsem-calculate-expression", paste0("--no-qualities ", outdir, "/reads/", s, ".fasta ", index, rsem_dir, "/", s))
	}

	library(stringr)
	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rsem"))
	files = list.files()
	files = files[str_detect(files, ".isoforms.results")]

	tab = read.table(files[1], header=T)
	info = cbind(tab[,5])
	rownames(info) = tab$transcript_id

	save(info, file="rsem_reads.rda")

	##########################################################################################
	### recountNNLS
	##########################################################################################
	bw = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/coverage_bigwigs/sample_01.bw')
	jx_file = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/cross_sample_results')
	table = data.frame(project=rl, run=paired, bigwig_path=bw, rls=37, paired_end=(paired==2))
	pheno = processPheno(table)
	rse_tx = recountNNLS(pheno, jx_file=jx_file)

}

rls = c(37, 50, 75, 100, 150)
sapply(rls, simulate, paired=1)

##########################################################################################
### Paired End (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr); library(recountNNLS)

simulate2 = function(rl, paired){
	condition = paste0(rl, "_", paired)
	samples = paste0("sample_0", 1)
	fasta = import("/dcl01/leek/data/ta_poc/GencodeV25/sim.fa", format="fasta")
	outdir = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition)
	dir.create(outdir)
	setwd(outdir)

	txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
	txs = txs[txs$type=="transcript"]
	sim_info = read.table("/dcl01/leek/data/ta_poc/geuvadis/simulation/sim_info.txt", header=T)
	ind = which(sim_info$reads>0)
	fasta = fasta[ind]
	sim_info = sim_info[ind,]
	writeXStringSet(fasta, "tx.fasta")
	set.seed(rl+paired)
	# simulate_experiment('tx.fasta', reads_per_transcript=sim_info$reads, num_reps=c(2, 2), fold_changes=1, outdir="reads", paired=(paired==2), readlen=rl)
	count_mat = cbind(sim_info$reads)
	simulate_experiment_countmat('tx.fasta',readmat=count_mat, outdir="reads", paired=(paired==2), readlen=rl)

	##########################################################################################
	### Rail-RNA
	##########################################################################################
	files = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/reads/", samples)
	man = cbind(paste0(files, "_1.fasta"), 0, paste0(files, "_2.fasta"), 0, samples)
	rail_dir = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rail")
	dir.create(rail_dir)
	write.table(man, sep="\t", quote=FALSE, col.names=FALSE, row.names=FALSE, file=paste0(rail_dir, "/manifest.txt"))

	dir.create(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/"))
	dir.create(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/logs"))
	script = "/users/jmfu/sum.sh"
	tool = "/dcl01/leek/data/bwtool/bwtool-1.0/bwtool"
	bins = paste0("/dcl01/leek/data/ta_poc/GencodeV25/bins_", rl, ".bed")
	bw = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rail/rail-rna_out/coverage_bigwigs/", samples, ".bw")
	output = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/", samples)
	sapply(output, dir.create)
	cmds = cbind("sh", script, tool, bins, bw, output)
	write.table(cmds, sep="\t", quote=FALSE, col.names=FALSE, row.names=FALSE, file=paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/commands.txt"))
	index="/dcl01/leek/data/HG38_rail/Homo_sapiens/UCSC/hg38/Sequence/"
	setwd(rail_dir)
	system2("rail-rna", paste0("go local -x ", index, "/BowtieIndex/genome ", index, "/Bowtie2Index/genome -m ", "manifest.txt"))


	##########################################################################################
	### hisat2
	##########################################################################################
	setwd(outdir)
	dir.create("hisat2")
	dir.create("hisat2/aligned")
	dir.create("hisat2/sorted")
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".ss.bam")
		readPath = paste0(outdir, "/reads/", s)
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".ss")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".ss.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "ss..bam")
		system2("hisat2", paste0("--dta -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -1 ", readPath, "_1.fasta", " -2 ", readPath, "_2.fasta ", "-S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".cl.bam")
		readPath = paste0(outdir, "/reads/", s)
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".cl")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".cl.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "cl..bam")
		system2("hisat2", paste0("--dta-cufflinks -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -1 ", readPath, "_1.fasta", " -2 ", readPath, "_2.fasta ", "-S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}

	### stringtie
	stringtie_dir = paste0(outdir, "/stringtie")
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"
	system2("mkdir", stringtie_dir)
	system2("cd", stringtie_dir)

	for(s in samples){
		workingDir = paste0(stringtie_dir, "/", s)
		system2("mkdir", workingDir)
		system2("stringtie", paste0("-o ", workingDir, "/cov-e.gtf -G ", annotation, " -e /dcl01/leek/data/ta_poc/geuvadis/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
		system2("stringtie", paste0("-o ", workingDir, "/cov.gtf -G ", annotation, " /dcl01/leek/data/ta_poc/geuvadis/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
	}

	setwd(stringtie_dir)
	info = import("sample_01/cov.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$reference_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov.rda"))

	setwd(stringtie_dir)
	info = import("sample_01/cov-e.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$transcript_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov-e.rda"))

	### cufflinks
	cufflinks_dir = paste0(outdir, "/hisat2/cufflinks")
	system2("mkdir", cufflinks_dir)
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"

	for(s in samples){
		workingDir = paste0(cufflinks_dir, "/", s)
		system2("mkdir", workingDir)
		system2("cufflinks", paste0("-m 250 -s 25 --total-hits-norm --no-effective-length-correction --no-length-correction -o ",
			workingDir, " -G ", annotation, " /dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/hisat2/sorted/", s, ".cl.bam"))
	}

	library(rtracklayer)
	setwd(cufflinks_dir)
	samps = list.files(); samps = samps[stringr::str_detect(samps, "sample")]
	base = import(paste0(samps[1], "/transcripts.gtf"))
	base_tx = base[base$type=="transcript"]
	info = data.frame(transcript_id = base_tx$transcript_id)
	for(f in samps){
		tmp = import(paste0(f, "/transcripts.gtf"))
		tmp_tx = tmp[tmp$type=="transcript"]
		info = cbind(info, tmp_tx$cov)
	}
	save(info, file=paste0(cufflinks_dir, "/hisat_cufflinks_cov.rda"))

	##########################################################################################
	### Kallisto
	##########################################################################################
	kallisto_dir = paste0(outdir, "/kallisto")
	system2("mkdir", kallisto_dir)
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_kallisto_ind"

	for(s in samples){
		workingDir = paste0(kallisto_dir, "/", s)
		system2("mkdir", workingDir)
		system2("kallisto", paste0("quant -i ", index, " -o ", workingDir , " ", outdir, "/reads/", s, "_1.fasta ", outdir, "/reads/", s, "_2.fasta"))
	}

	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/kallisto"))
	files = list.files(); files = files[stringr::str_detect(files, "sample")]
	tab = read.table(paste0(files[1], "/abundance.tsv"), header=T)
	counts_kallisto = matrix(0, ncol=length(files), nrow=dim(tab)[1])
	rownames(counts_kallisto) = tab[,1]
	for(i in 1:length(files)){
		tab = read.table(paste0(files[i], "/abundance.tsv"), header=T)
		counts_kallisto[,i] = tab[match(rownames(counts_kallisto), tab[,1]),4]
	}
	save(counts_kallisto, file=paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/kallisto/kallisto_reads.rda"))

	##########################################################################################
	### Salmon
	##########################################################################################
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_salmon_ind/"
	salmon_dir = paste0(outdir, "/salmon")
	dir.create(salmon_dir)
	for(s in samples){
		system2("/users/jmfu/Salmon-0.8.2_linux_x86_64/bin/salmon", paste0("quant -i ", index, " -l A -1 ", outdir, "/reads/", s, "_1.fasta -2 ", outdir, "/reads/", s, "_2.fasta -o ", salmon_dir, "/", s))	
	}

	library(rtracklayer)
	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/salmon"))
	files = list.files()
	files = files[stringr::str_detect(files, "sample")]

	tab = read.table(paste0(files[1], "/quant.sf"), header=T)
	salmon = data.frame(transcript_id = tab[,1], reads = tab[,5])
	save(salmon, file="salmon_reads.rda")


	##########################################################################################
	### RSEM
	##########################################################################################
	rsem_dir = paste0(outdir, "/rsem")
	dir.create(rsem_dir)
	index = "/dcl01/leek/data/ta_poc/GencodeV25/rsem_sim_ind "

	for(s in samples){
		system2("rsem-calculate-expression", paste0("--no-qualities --paired-end ",  outdir, "/reads/", s, "_1.fasta ", outdir, "/reads/", s, "_2.fasta ", index, rsem_dir, "/", s))
	}

	library(stringr)
	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rsem"))
	files = list.files()
	files = files[str_detect(files, ".isoforms.results")]

	tab = read.table(files[1], header=T)
	info = cbind(tab[,5])
	rownames(info) = tab$transcript_id

	save(info, file="rsem_reads.rda")

	##########################################################################################
	### recountNNLS
	##########################################################################################
	bw = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/coverage_bigwigs/sample_0', 1, '.bw')
	jx_file = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/cross_sample_results')
	table = data.frame(project=rl, run=paired, bigwig_path=bw, rls=rl, paired_end=(paired==2))
	pheno = processPheno(table)
	
	load("/dcl01/leek/data/ta_poc/GencodeV25/matrix_bundle_50.rda")
	gene_mat = gene_mat_50
	rse_tx = recountNNLS(pheno, jx_file=jx_file, cores=10)
	rse = rse_tx
	save(rse, file=paste0("~/recountNNLS_", rl, "_", paired, ".rda"))
}

rls = c(37, 50, 75, 100, 150)
sapply(rls, simulate2, paired=2)


###
library(stringr)
library(recountNNLS)
library(SummarizedExperiment)
id = "50_2"
paired = str_detect(id, "_2")
rl = as.numeric(str_replace(id, "_.*", ""))
setwd('/dcl01/leek/data/ta_poc/geuvadis/simulation')
load("/dcl01/leek/data/ta_poc/tx_wids.rda")
load("~/50_2.sim")
tab = sim; colnames(tab) = c("t_id", "reads")

setwd(id)
load("kallisto/kallisto_reads.rda")
kallisto_sub = counts_kallisto[match(tab$t_id, rownames(counts_kallisto)),]
load(paste0("~/recountNNLS_", id, ".rda"))
tx_info = rowData(rse); tab$gene_id = tx_info$gene_id[match(tab$t_id, tx_info$tx_name)]
reads = assays(rse)$counts; us_sub = apply(reads[match(tab$t_id, rownames(reads)),,drop=FALSE], 2, as.numeric)
load(paste0("recount/reads_weight1-", rl, ".rda")); us_cts = lapply(reads_list, function(x) x[[1]]); us = do.call(rbind, us_cts); us_sub = us[match(tab$t_id, rownames(us)),1,drop=F]
load("stringtie/hisat2_cov-e.rda")
st_sub = info[match(tab$t_id, info[,1]),2, drop=FALSE]
st_sub = apply(st_sub, 2, as.numeric); wids = as.numeric(as.character(tx_wids[match(tab$t_id, tx_wids[,1]), 2])); st_sub = st_sub*wids/rl
load("rsem/rsem_reads.rda")
rsem_sub = info[match(tab$t_id, rownames(info)),,drop=F]
load("salmon/salmon_reads.rda")
salmon_sub = salmon[match(tab$t_id, salmon[,1]), 2, drop=F]
load("hisat2/cufflinks/hisat_cufflinks_cov.rda")
cufflinks_sub = info[match(tab$t_id, info[,1]), 2, drop=F]
cufflinks_sub = apply(cufflinks_sub, 2, as.numeric); wids = as.numeric(as.character(tx_wids[match(tab$t_id, tx_wids[,1]), 2])); cufflinks_sub = cufflinks_sub*wids/rl

if(paired==T){
            us_sub = us_sub/2
            st_sub = st_sub/2
            cufflinks_sub = cufflinks_sub/2
      }
real = round(tab$reads)

	us_err = us_sub[,1] - real
	kallisto_err = kallisto_sub[,1] - real
	st_err = st_sub[,1] - real
	rsem_err = rsem_sub[,1] - real
	salmon_err = salmon_sub[,1] - real
	cufflinks_err = cufflinks_sub[,1]-real

	tss = sum((real-mean(real))^2)
	rss_us = sum((us_err-mean(us_err, na.rm=T))^2, na.rm=T)
	rss_kallisto = sum((kallisto_err-mean(kallisto_err))^2)
	rss_st = sum((st_err-mean(st_err))^2)
	rss_rsem = sum((rsem_err-mean(rsem_err))^2)
	rss_salmon = sum((salmon_err-mean(salmon_err))^2)
	rss_cufflinks = sum((cufflinks_err-mean(cufflinks_err, na.rm=T))^2, na.rm=T)

	r2_us = 1-rss_us/tss
	r2_kallisto = 1-rss_kallisto/tss
	r2_st = 1-rss_st/tss
	r2_rsem = 1-rss_rsem/tss
	r2_salmon = 1-rss_salmon/tss
	r2_cufflinks = 1-rss_cufflinks/tss

	rmse_us = signif(sqrt(mean(us_err^2, na.rm=T)), 3)
	rmse_kallisto = signif(sqrt(mean(kallisto_err^2, na.rm=T)), 3)
	rmse_st = signif(sqrt(mean(st_err^2, na.rm=T)), 3)
	rmse_rsem = signif(sqrt(mean(rsem_err^2, na.rm=T)), 3)
	rmse_salmon = signif(sqrt(mean(salmon_err^2, na.rm=T)), 3)
	rmse_cufflinks= signif(sqrt(mean(cufflinks_err^2, na.rm=T)), 3)

	 png(paste0(id, "_paper2.png"), width=600, height=800, units = "px", pointsize=18)
	 bord = 12
	 cs=0.1
      layout(matrix(c(1, 1, 1, 1, 1, 1, 1, 1, 2:25), nrow=8, byrow=F), heights=c(1, 4, 4, 4, 4, 4, 4, 1), widths=c(1.5, 4, 4, 1.5))
      par(mar=rep(0,4))
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      end = "Single End"
      if(paired==T){end="Paired End"}
      text(x=0.4, y=0.5, srt=90, paste0(rl, "bp ", end, " Simulation Results"), cex=2, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.5, y=0.8, pos=1, "Tx Level", cex=2)

      A = log(us_sub[,1]+1, 2) + log(real+1, 2)
      M = log(us_sub[,1]+1, 2) - log(real+1, 2)

      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2, col=rgb(0,0,0,0.1), main = paste0("recountNNLS \nRMSE: ", rmse_us), xlab="MA Plot: Truth - LM",
      xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)

      A = log(kallisto_sub[,1]+1, 2) + log(real+1, 2)
      M = log(kallisto_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2, col=rgb(0,0,0,0.05), main = paste0("Kallisto \nRMSE: ", rmse_kallisto), xlab="MA Plot Truth - Kallisto",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)

      A = log(st_sub[,1]+1, 2) + log(real+1, 2)
      M = log(st_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.05),main = paste0("HISAT2-StringTie \nRMSE: ", rmse_st), xlab="MA Plot Truth - Hisat-Stringtie",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)

      A = log(cufflinks_sub[,1]+1, 2) + log(real+1, 2)
      M = log(cufflinks_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.05),main = paste0("HISAT2-Cufflinks \nRMSE: ", rmse_cufflinks), xlab="MA Plot Truth - cufflinks",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)

      A = log(rsem_sub[,1]+1, 2) + log(real+1, 2)
      M = log(rsem_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.05),main = paste0("RSEM \nRMSE: ", rmse_rsem), xlab="MA Plot Truth - RSEM",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)

      A = log(salmon_sub[,1]+1, 2) + log(real+1, 2)
      M = log(salmon_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.05),main = paste0("Salmon \nRMSE: ", rmse_salmon), xlab="MA Plot Truth - salmon",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=2, at = log(c(1/1000, 1/100, 1/10, 1, 10, 100, 1000),2), labels=parse(text = c('10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3')) , las=2)
      axis(side=1, at = log(c(1, 10, 100, 1000, 10000, 100000, 1000000), 2),
            labels=parse(text = c(1, 10, 100, '10^3', '10^4', '10^5', '10^6')))

      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.5, y=0.8, pos=1, "Gene Level", cex=2)

	#########
	bord = 16.5

	us_sub = cbind(by(us_sub[,1], tab$gene_id, sum))
	kallisto_sub = cbind(by(kallisto_sub[,1], tab$gene_id, sum))
	st_sub = cbind(by(st_sub[,1], tab$gene_id, sum))
	rsem_sub = cbind(by(rsem_sub[,1], tab$gene_id, sum))
	salmon_sub = cbind(by(salmon_sub[,1], tab$gene_id, sum))
	cufflinks_sub = cbind(by(cufflinks_sub[,1], tab$gene_id, sum))
	real = by(real, tab$gene_id, sum)

	us_err = us_sub[,1] - real
	kallisto_err = kallisto_sub[,1] - real
	st_err = st_sub[,1] - real
	rsem_err = rsem_sub[,1] - real
	salmon_err = salmon_sub[,1] - real
	cufflinks_err = cufflinks_sub[,1] - real

	rmse_us = signif(sqrt(mean(us_err^2, na.rm=T)), 3)
	rmse_kallisto = signif(sqrt(mean(kallisto_err^2, na.rm=T)), 3)
	rmse_st = signif(sqrt(mean(st_err^2, na.rm=T)), 3)
	rmse_rsem = signif(sqrt(mean(rsem_err^2, na.rm=T)), 3)
	rmse_salmon = signif(sqrt(mean(salmon_err^2, na.rm=T)), 3)
	rmse_cufflinks = signif(sqrt(mean(cufflinks_err^2, na.rm=T)), 3)

	 A = log(us_sub[,1]+1, 2) + log(real+1, 2)
      M = log(us_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2, col=rgb(0,0,0,0.1), main = paste0("recountNNLS \nRMSE: ", rmse_us), xlab="MA Plot: Truth - LM",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)

      A = log(kallisto_sub[,1]+1, 2) + log(real+1, 2)
      M = log(kallisto_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2, col=rgb(0,0,0,0.1), main = paste0("Kallisto \nRMSE: ", rmse_kallisto), xlab="MA Plot Truth - Kallisto",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)

      A = log(st_sub[,1]+1, 2) + log(real+1, 2)
      M = log(st_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.1),main = paste0("HISAT2-StringTie \nRMSE: ", rmse_st), xlab="MA Plot Truth - Hisat-Stringtie",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)

      A = log(cufflinks_sub[,1]+1, 2) + log(real+1, 2)
      M = log(cufflinks_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.1),main = paste0("HISAT2-Cufflinks \nRMSE: ", rmse_cufflinks), xlab="MA Plot Truth - RSEM",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)

      A = log(rsem_sub[,1]+1, 2) + log(real+1, 2)
      M = log(rsem_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.1),main = paste0("RSEM \nRMSE: ", rmse_rsem), xlab="MA Plot Truth - RSEM",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)

      A = log(salmon_sub[,1]+1, 2) + log(real+1, 2)
      M = log(salmon_sub[,1]+1, 2) - log(real+1, 2)
      plot(M~A, ylim=c(-bord, bord), xlim=c(0.5, bord)*2,  col=rgb(0,0,0,0.1),main = paste0("Salmon \nRMSE: ", rmse_salmon), xlab="MA Plot Truth - RSEM",
           xaxt="n", yaxt="n", pch=19, cex=cs); abline(h=0, col=2)
      abline(0, 1, lty=2, col=2); abline(0, -1, lty=2, col=2)
      axis(side=4, at = log(c(1/10000, 1/1000, 1/100, 1/10, 1, 10, 100, 1000, 10000),2),
            labels=parse(text = c('10^-4', '10^-3', '10^-2', '10^-1', '1', '10', '10^2', '10^3', '10^4')) , las=2)
      axis(side=1, at = log(c(10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000), 2),
            labels=parse(text = c(10, 100, '10^3', '10^4', '10^5', '10^6', '10^7', '10^8', '10^9')))

      par(xpd=NA)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "recountNNLS", cex=1.4, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "Kallisto", cex=1.4, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "H2-StringTie", cex=1.4, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "H2-Cufflinks", cex=1.4, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "RSEM", cex=1.4, pos=3)
      plot(c(0, 1), c(0,1), xlab="", ylab="", xaxt="n", yaxt="n", type="n", main="", xaxs="i", yaxs="i", bty="n")
      text(x=0.6, y=0.5, srt=270, "Salmon", cex=1.4, pos=3)

      par(xpd=F)
      dev.off()

