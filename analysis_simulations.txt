##########################################################################################
### Subset to coding transcripts on chr1 and chr14
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr)
txs_full = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.coding.gff3")
txs_sim = txs_full[seqnames(txs_full) %in% c("chr1", "chr14")]
export(txs_sim, con='/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf', format='gtf')

##########################################################################################
### Preparing simulation truth (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr)
txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
txs = txs[txs$type=="transcript"]
sim_info = data.frame(transcript_id = txs$transcript_id, gene_id = txs$gene_id, reads = 0)
library(gtools)
simAbundance = function(gene, sim_info){
	sim_info_sub = sim_info[sim_info$gene_id == gene,]
	k = dim(sim_info_sub)[1]
	abundance = rdirichlet(1, rep(1/k, k))
	return(abundance)
}
seed=76
set.seed(seed)
genes = unique(sim_info$gene_id)
abundances = sapply(genes, simAbundance, sim_info)
abundances = do.call(c, abundances)
sim_info$abundance = abundances

tx_perGene = by(rep(1, dim(sim_info)[1]), droplevels(sim_info$gene_id), sum)
tx_perGene = data.frame(gene_id = names(tx_perGene), tx_count = as.numeric(tx_perGene))
set.seed(seed+1)
tx_perGene$geneReads = rnbinom(dim(tx_perGene)[1], 4, 0.01)
sim_info = merge(sim_info, tx_perGene, by="gene_id", sort=F)
sim_info$reads = round(sim_info$geneReads*sim_info$abundance)
write.table(sim_info, row.names=F, file="sim_info.txt")

##########################################################################################
### Preparing alignment/quantification indices (bash)
##########################################################################################
cd /dcl01/leek/data/ta_poc/GencodeV25
gffread -w sim.fa -g hg38.fa gencodeV25.sim.gtf
## HISAT2
module load cufflinks/2.2.1 
python ~/hisat2-2.0.5/hisat2_extract_exons.py gencodeV25.sim.gtf > gencodeV25.sim.exons
python ~/hisat2-2.0.5/hisat2_extract_splice_sites.py gencodeV25.sim.gtf > gencodeV25.sim.splice.sites
hisat2-build --exon gencodeV25.sim.exons --ss gencodeV25.sim.splice.sites /dcl01/leek/data/ta_poc/GencodeV25/hg38_sim.fasta /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed
samtools faidx hg38_sim.fasta
gffread -w sim.fa -g hg38_sim.fasta gencodeV25.sim.gtf

## Kallisto
kallisto index -i hg38_sim_kallisto_ind sim.fa

## Salmon
/users/jmfu/Salmon-0.8.2_linux_x86_64/bin/salmon index -t sim.fa -i hg38_sim_salmon_ind --type quasi -k 31

## RSEM
rsem-prepare-reference --gtf gencodeV25.sim.gtf --bowtie hg38_sim.fasta rsem_sim_ind


##########################################################################################
### Single End (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr); library(recountNNLS)

simulate = function(rl, paired){
	condition = paste0(rl, "_", paired)
	samples = paste0("sample_0", 1:4)
	fasta = import("/dcl01/leek/data/ta_poc/GencodeV25/sim.fa", format="fasta")
	outdir = paste0("/dcl01/leek/data/ta_poc/simulation/", condition)
	dir.create(outdir)
	setwd(outdir)

	txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
	txs = txs[txs$type=="transcript"]
	sim_info = read.table("/dcl01/leek/data/ta_poc/simulation/sim_info.txt", header=T)
	ind = which(sim_info$reads>0)
	fasta = fasta[ind]
	sim_info = sim_info[ind,]
	writeXStringSet(fasta, "tx.fasta")
	set.seed(rl+paired)
	simulate_experiment('tx.fasta', reads_per_transcript=sim_info$reads, num_reps=c(2, 2), fold_changes=1, outdir="reads", paired=(paired==2), readlen=rl)

	##########################################################################################
	### Rail-RNA
	##########################################################################################
	files = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/reads/", samples, ".fasta")
	man = cbind(files, 0, samples)
	rail_dir = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rail")
	dir.create(rail_dir)
	write.table(man, sep="\t", quote=F, col.names=F, row.names=F, file=paste0(rail_dir, "/manifest.txt"))

	dir.create(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/"))
	dir.create(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/logs"))
	script = "/users/jmfu/sum.sh"
	tool = "/dcl01/leek/data/bwtool/bwtool-1.0/bwtool"
	bins = paste0("/dcl01/leek/data/ta_poc/GencodeV25/bins_", rl, ".bed")
	bw = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rail/rail-rna_out/coverage_bigwigs/", samples, ".bw")
	output = paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/", samples)
	sapply(output, dir.create)
	cmds = cbind("sh", script, tool, bins, bw, output)
	write.table(cmds, sep="\t", quote=F, col.names=F, row.names=F, file=paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/recount/commands.txt"))
	index="/dcl01/leek/data/HG38_rail/Homo_sapiens/UCSC/hg38/Sequence/"
	setwd(rail_dir)
	system2("rail-rna", paste0("go local -x ", index, "/BowtieIndex/genome ", index, "/Bowtie2Index/genome -m ", rail_dir, "/manifest.txt"))

	##########################################################################################
	### hisat2
	##########################################################################################
	setwd(outdir)
	dir.create("hisat2")
	dir.create("hisat2/aligned")
	dir.create("hisat2/sorted")
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".ss.bam")
		readPath = paste0(outdir, "/reads/", s, ".fasta")
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".ss")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".ss.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "ss..bam")
		system2("hisat2", paste0("--dta -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -U ", readPath, " -S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".cl.bam")
		readPath = paste0(outdir, "/reads/", s, ".fasta")
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".cl")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".cl.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "cl..bam")
		system2("hisat2", paste0("--dta-cufflinks -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -U ", readPath, " -S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}

	### stringtie
	stringtie_dir = paste0(outdir, "/stringtie")
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"
	system2("mkdir", stringtie_dir)
	system2("cd", stringtie_dir)

	for(s in samples){
		workingDir = paste0(stringtie_dir, "/", s)
		system2("mkdir", workingDir)
		system2("stringtie", paste0("-o ", workingDir, "/cov-e.gtf -G ", annotation, " -e /dcl01/leek/data/ta_poc/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
		system2("stringtie", paste0("-o ", workingDir, "/cov.gtf -G ", annotation, " /dcl01/leek/data/ta_poc/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
	}

	setwd(stringtie_dir)
	info = import("sample_01/cov.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$reference_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov.rda"))

	setwd(stringtie_dir)
	info = import("sample_01/cov-e.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$transcript_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov-e.rda"))

	### cufflinks
	cufflinks_dir = paste0(outdir, "/hisat2/cufflinks")
	system2("mkdir", cufflinks_dir)
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"

	for(s in samples){
		workingDir = paste0(cufflinks_dir, "/", s)
		system2("mkdir", workingDir)
		system2("cufflinks", paste0("-m 250 -s 25 --total-hits-norm --no-effective-length-correction --no-length-correction -o ",
			workingDir, " -G ", annotation, " /dcl01/leek/data/ta_poc/simulation/", condition, "/hisat2/sorted/", s, ".cl.bam"))
	}

	library(rtracklayer)
	setwd(cufflinks_dir)
	samps = list.files(); samps = samps[stringr::str_detect(samps, "sample")]
	base = import(paste0(samps[1], "/transcripts.gtf"))
	base_tx = base[base$type=="transcript"]
	info = data.frame(transcript_id = base_tx$transcript_id)
	for(f in samps){
		tmp = import(paste0(f, "/transcripts.gtf"))
		tmp_tx = tmp[tmp$type=="transcript"]
		info = cbind(info, tmp_tx$cov)
	}
	save(info, file=paste0(cufflinks_dir, "/hisat_cufflinks_cov.rda"))

	##########################################################################################
	### Kallisto
	##########################################################################################
	kallisto_dir = paste0(outdir, "/kallisto")
	system2("mkdir", kallisto_dir)
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_kallisto_ind"

	for(s in samples){
		workingDir = paste0(kallisto_dir, "/", s)
		system2("mkdir", workingDir)
		system2("kallisto", paste0("quant -i ", index, " -o ", workingDir, " --single -l 250 -s 25 ", outdir, "/reads/", s, ".fasta"))
	}

	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/kallisto"))
	files = list.files(); files = files[stringr::str_detect(files, "sample")]
	tab = read.table(paste0(files[1], "/abundance.tsv"), header=T)
	counts_kallisto = matrix(0, ncol=length(files), nrow=dim(tab)[1])
	rownames(counts_kallisto) = tab[,1]
	for(i in 1:length(files)){
		tab = read.table(paste0(files[i], "/abundance.tsv"), header=T)
		counts_kallisto[,i] = tab[match(rownames(counts_kallisto), tab[,1]),4]
	}
	save(counts_kallisto, file=paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/kallisto/kallisto_reads.rda"))

	##########################################################################################
	### Salmon
	##########################################################################################
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_salmon_ind/"
	salmon_dir = paste0(outdir, "/salmon")
	dir.create(salmon_dir)
	for(s in samples){
		system2("/users/jmfu/Salmon-0.8.2_linux_x86_64/bin/salmon", paste0("quant -i ", index, " -l A -r ", outdir, "/reads/", s, ".fasta -o ", salmon_dir, "/", s))	
	}

	library(rtracklayer)
	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/salmon"))
	files = list.files()
	files = files[stringr::str_detect(files, "sample")]

	tab = read.table(paste0(files[1], "/quant.sf"), header=T)
	salmon = data.frame(transcript_id = tab[,1], reads = tab[,5])
	save(salmon, file="salmon_reads.rda")


	##########################################################################################
	### RSEM
	##########################################################################################
	rsem_dir = paste0(outdir, "/rsem")
	dir.create(rsem_dir)
	index = "/dcl01/leek/data/ta_poc/GencodeV25/rsem_sim_ind "

	for(s in samples){
		system2("rsem-calculate-expression", paste0("--no-qualities ", outdir, "/reads/", s, ".fasta ", index, rsem_dir, "/", s))
	}

	library(stringr)
	setwd(paste0("/dcl01/leek/data/ta_poc/simulation/", condition, "/rsem"))
	files = list.files()
	files = files[str_detect(files, ".isoforms.results")]

	tab = read.table(files[1], header=T)
	info = cbind(tab[,5])
	rownames(info) = tab$transcript_id

	save(info, file="rsem_reads.rda")

	##########################################################################################
	### recountNNLS
	##########################################################################################
	bw = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/coverage_bigwigs/sample_01.bw')
	jx_file = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/cross_sample_results')
	table = data.frame(project=rl, run=paired, bigwig_path=bw, rls=37, paired_end=(paired==2))
	pheno = processPheno(table)
	rse_tx = recountNNLS(pheno, jx_file=jx_file)

}

rls = c(37, 50, 75, 100, 150)
sapply(rls, simulate, paired=1)

##########################################################################################
### Paired End (R)
##########################################################################################
rm(list=ls())
library(polyester); library(rtracklayer); library(Biostrings); library(stringr); library(recountNNLS)

simulate2 = function(rl, paired){
	condition = paste0(rl, "_", paired)
	samples = c(paste0("sample_0", 1:9), paste0("sample_", 11:20))
	fasta = import("/dcl01/leek/data/ta_poc/GencodeV25/sim.fa", format="fasta")
	outdir = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition)
	dir.create(outdir)
	setwd(outdir)

	txs = import("/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf")
	txs = txs[txs$type=="transcript"]
	sim_info = read.table("/dcl01/leek/data/ta_poc/geuvadis/simulation/sim_info.txt", header=T)
	ind = which(sim_info$reads>0)
	fasta = fasta[ind]
	sim_info = sim_info[ind,]
	writeXStringSet(fasta, "tx.fasta")
	set.seed(rl+paired)
	simulate_experiment('tx.fasta', reads_per_transcript=sim_info$reads, num_reps=c(10, 10), fold_changes=1, outdir="reads", paired=(paired==2), readlen=rl)

	##########################################################################################
	### Rail-RNA
	##########################################################################################
	files = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/reads/", samples)
	man = cbind(paste0(files, "_1.fasta"), 0, paste0(files, "_2.fasta"), 0, samples)
	rail_dir = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rail")
	dir.create(rail_dir)
	write.table(man, sep="\t", quote=F, col.names=F, row.names=F, file=paste0(rail_dir, "/manifest.txt"))

	dir.create(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/"))
	dir.create(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/logs"))
	script = "/users/jmfu/sum.sh"
	tool = "/dcl01/leek/data/bwtool/bwtool-1.0/bwtool"
	bins = paste0("/dcl01/leek/data/ta_poc/GencodeV25/bins_", rl, ".bed")
	bw = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rail/rail-rna_out/coverage_bigwigs/", samples, ".bw")
	output = paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/", samples)
	sapply(output, dir.create)
	cmds = cbind("sh", script, tool, bins, bw, output)
	write.table(cmds, sep="\t", quote=F, col.names=F, row.names=F, file=paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/recount/commands.txt"))
	index="/dcl01/leek/data/HG38_rail/Homo_sapiens/UCSC/hg38/Sequence/"
	setwd(rail_dir)
	system2("rail-rna", paste0("go local -x ", index, "/BowtieIndex/genome ", index, "/Bowtie2Index/genome -m ", rail_dir, "/manifest.txt"))

	system2("cp", paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/archive/rl37_1_cov10_tx10/recount/.rl37_1_cov10_tx10.sh ", outdir, "/recount/.", condition, ".sh"))

	system2("sed", paste0("-i 's/rl37_1_cov10_tx10/", condition,"/g' ", outdir, "/recount/.", condition,".sh"))
	system2("sed", paste0("-i 's/-t 1:10/-t 1:", length(samples), "/g' ", outdir, "/recount/.", condition,".sh"))
	system2("sed", paste0("-i 's/-N /-N sim/g' ", outdir, "/recount/.", condition,".sh"))
	system2("qsub", paste0(outdir, "/recount/.", condition,".sh"))


	##########################################################################################
	### hisat2
	##########################################################################################
	setwd(outdir)
	dir.create("hisat2")
	dir.create("hisat2/aligned")
	dir.create("hisat2/sorted")
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".ss.bam")
		readPath = paste0(outdir, "/reads/", s)
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".ss")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".ss.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "ss..bam")
		system2("hisat2", paste0("--dta -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -1 ", readPath, "_1.fasta", " -2 ", readPath, "_2.fasta ", "-S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}
	for(s in samples){
		print(s); flush.console()
		outPath = paste0(outdir, "/hisat2/sorted/", s, ".cl.bam")
		readPath = paste0(outdir, "/reads/", s)
		outBam = paste0(outdir, "/hisat2/sorted/", s, ".cl")
		outSam = paste0(outdir, "/hisat2/aligned/", s, ".cl.sam")
		intermediateBam = paste0(outdir, "/hisat2/aligned/", s, "cl..bam")
		system2("hisat2", paste0("--dta-cufflinks -f -x /dcl01/leek/data/ta_poc/hisat2-full-index/hisat2-ind-detailed -1 ", readPath, "_1.fasta", " -2 ", readPath, "_2.fasta ", "-S ", outSam))
		system2("samtools", paste0("view -b ", outSam, " > ", intermediateBam))
		system2("samtools", paste0("sort ", intermediateBam, " ", outBam))
	}

	### stringtie
	stringtie_dir = paste0(outdir, "/stringtie")
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"
	system2("mkdir", stringtie_dir)
	system2("cd", stringtie_dir)

	for(s in samples){
		workingDir = paste0(stringtie_dir, "/", s)
		system2("mkdir", workingDir)
		system2("stringtie", paste0("-o ", workingDir, "/cov-e.gtf -G ", annotation, " -e /dcl01/leek/data/ta_poc/geuvadis/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
		system2("stringtie", paste0("-o ", workingDir, "/cov.gtf -G ", annotation, " /dcl01/leek/data/ta_poc/geuvadis/simulation/", rl, "_", paired, "/hisat2/sorted/", s, ".ss.bam") )
	}

	setwd(stringtie_dir)
	info = import("sample_01/cov.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$reference_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov.rda"))

	setwd(stringtie_dir)
	info = import("sample_01/cov-e.gtf")
	info = info[info$type=="transcript"]
	info = data.frame(transcript_id = info$transcript_id, info$cov)
	save(info, file=paste0(stringtie_dir, "/hisat2_cov-e.rda"))

	### cufflinks
	cufflinks_dir = paste0(outdir, "/hisat2/cufflinks")
	system2("mkdir", cufflinks_dir)
	annotation="/dcl01/leek/data/ta_poc/GencodeV25/gencodeV25.sim.gtf"

	for(s in samples){
		workingDir = paste0(cufflinks_dir, "/", s)
		system2("mkdir", workingDir)
		system2("cufflinks", paste0("-m 250 -s 25 --total-hits-norm --no-effective-length-correction --no-length-correction -o ",
			workingDir, " -G ", annotation, " /dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/hisat2/sorted/", s, ".cl.bam"))
	}

	library(rtracklayer)
	setwd(cufflinks_dir)
	samps = list.files(); samps = samps[stringr::str_detect(samps, "sample")]
	base = import(paste0(samps[1], "/transcripts.gtf"))
	base_tx = base[base$type=="transcript"]
	info = data.frame(transcript_id = base_tx$transcript_id)
	for(f in samps){
		tmp = import(paste0(f, "/transcripts.gtf"))
		tmp_tx = tmp[tmp$type=="transcript"]
		info = cbind(info, tmp_tx$cov)
	}
	save(info, file=paste0(cufflinks_dir, "/hisat_cufflinks_cov.rda"))

	##########################################################################################
	### Kallisto
	##########################################################################################
	kallisto_dir = paste0(outdir, "/kallisto")
	system2("mkdir", kallisto_dir)
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_kallisto_ind"

	for(s in samples){
		workingDir = paste0(kallisto_dir, "/", s)
		system2("mkdir", workingDir)
		system2("kallisto", paste0("quant -i ", index, " -o ", workingDir , " ", outdir, "/reads/", s, "_1.fasta ", outdir, "/reads/", s, "_2.fasta"))
	}

	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/kallisto"))
	files = list.files(); files = files[stringr::str_detect(files, "sample")]
	tab = read.table(paste0(files[1], "/abundance.tsv"), header=T)
	counts_kallisto = matrix(0, ncol=length(files), nrow=dim(tab)[1])
	rownames(counts_kallisto) = tab[,1]
	for(i in 1:length(files)){
		tab = read.table(paste0(files[i], "/abundance.tsv"), header=T)
		counts_kallisto[,i] = tab[match(rownames(counts_kallisto), tab[,1]),4]
	}
	save(counts_kallisto, file=paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/kallisto/kallisto_reads.rda"))

	##########################################################################################
	### Salmon
	##########################################################################################
	index="/dcl01/leek/data/ta_poc/GencodeV25/hg38_sim_salmon_ind/"
	salmon_dir = paste0(outdir, "/salmon")
	dir.create(salmon_dir)
	for(s in samples){
		system2("/users/jmfu/Salmon-0.8.2_linux_x86_64/bin/salmon", paste0("quant -i ", index, " -l A -1 ", outdir, "/reads/", s, "_1.fasta -2 ", outdir, "/reads/", s, "_2.fasta -o ", salmon_dir, "/", s))	
	}

	library(rtracklayer)
	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/salmon"))
	files = list.files()
	files = files[stringr::str_detect(files, "sample")]

	tab = read.table(paste0(files[1], "/quant.sf"), header=T)
	salmon = data.frame(transcript_id = tab[,1], reads = tab[,5])
	save(salmon, file="salmon_reads.rda")


	##########################################################################################
	### RSEM
	##########################################################################################
	rsem_dir = paste0(outdir, "/rsem")
	dir.create(rsem_dir)
	index = "/dcl01/leek/data/ta_poc/GencodeV25/rsem_sim_ind "

	for(s in samples){
		system2("rsem-calculate-expression", paste0("--no-qualities --paired-end ",  outdir, "/reads/", s, "_1.fasta ", outdir, "/reads/", s, "_2.fasta ", index, rsem_dir, "/", s))
	}

	library(stringr)
	setwd(paste0("/dcl01/leek/data/ta_poc/geuvadis/simulation/", condition, "/rsem"))
	files = list.files()
	files = files[str_detect(files, ".isoforms.results")]

	tab = read.table(files[1], header=T)
	info = cbind(tab[,5])
	rownames(info) = tab$transcript_id

	save(info, file="rsem_reads.rda")

	##########################################################################################
	### recountNNLS
	##########################################################################################
	bw = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/coverage_bigwigs/sample_01.bw')
	jx_file = paste0('/dcl01/leek/data/ta_poc/geuvadis/simulation/', rl, '_', paired, '/rail/rail-rna_out/cross_sample_results')
	table = data.frame(project=rl, run=paired, bigwig_path=bw, rls=37, paired_end=(paired==2))
	pheno = processPheno(table)
	rse_tx = recountNNLS(pheno, jx_file=jx_file)
}

rls = c(37, 50, 75, 100, 150)
sapply(rls, simulate2, paired=2)
